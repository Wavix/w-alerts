name: Go

on: [push, pull_request]

env:
  GOOS: linux
  GOARCH: amd64

jobs:
  test_and_build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.21

      - name: Test
        run: |
          cp .env.example .env
          go test -v -coverprofile=coverage.txt -covermode=atomic

      - name: Build
        run: |
          CGO_ENABLED=0 go build -o build/

      - name: Archive build
        run: |
          zip -r build.zip build/

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ""
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build.zip
          asset_name: build-${{ env.GOOS }}-${{ env.GOARCH }}.zip
          asset_content_type: application/zip
